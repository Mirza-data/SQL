

In this project, I worked with two tables:

customers – contains customer details such as name, billing/shipping addresses, and contact information.

shipments – contains shipment records including weight, shipping method, dates, and status.

The goal was to practice intermediate SQL queries that mimic real-world data analyst tasks.

🔍 Key Insights from Queries:

Identified customers who have different billing and shipping addresses.

Found the top 3 customers by total shipment weight, which helps understand the most valuable clients.

Calculated monthly shipment volumes (grouping by shipping date).

Analyzed delivery performance by checking shipments delivered on time.

Explored revenue potential by calculating revenue from shipment weights.

Detected customers with repeated shipment delays.

🛠 Skills Practiced:

JOIN operations between tables

GROUP BY and HAVING for aggregations

Date formatting with strftime

Using ORDER BY and LIMIT to rank results

Writing queries with conditions (WHERE, IN, NOT IN)

This exercise helped me strengthen my SQL querying and analytical thinking by solving business-like problems with relational data.



CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY,
    customer_name TEXT,
    contact_email TEXT,
    contact_phone TEXT,
    billing_address TEXT,
    shipping_address TEXT
);
    
CREATE TABLE shipments (
    shipment_id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    package_description TEXT,
    weight_kg REAL,
    shipping_method TEXT,
    shipping_date DATE,
    delivery_date DATE,
    status TEXT
);

INSERT INTO customers (customer_id, customer_name, contact_email, contact_phone, billing_address, shipping_address)
VALUES
    (1, 'Lucy Keller', 'l.a.keller@example.com', '555-387-9920', '4902 Main St, Suite 101, Cityville, CA 39821', '4902 Main St, Suite 101, Cityville, CA 39821'),
    (2, 'Alicia Henry', 'ahenry@example.com', '555-912-4491', '56 Elm St, Apt 20b, Townsville, NY 39018', '512 Walnut St, Hometown, PA 60178'),
    (3, 'Daniel Tovey', 'dt1990@example.com', '555-621-0104', '2450 Oak Rd, Unit 5, Villagetown, TX 30072', '34 North Broadway, Grand Rapids, MI 47299'),
    (4, 'Marjorie L. Whitney', 'whitneym12@example.com', '555-386-2400', '56 Pine Ave, Apt 3, Hamletown, FL 20971', '56 Pine Ave, Apt 3, Hamletown, FL 20971'),
    (5, 'Gloria Cortez Martinez', 'gloria.c.martinez@example.com', '555-410-6984', '45 Cedar St, Suite 7, Parksville, AZ 98622', '45 Cedar St, Suite 7, Parksville, AZ 98622'),
    (6, 'Michael Johnson III', 'mj3@example.com', '555-388-1922', '2344 Birch Rd, Unit 12, Meadowville, WA 10321', '2344 Birch Rd, Unit 12, Meadowville, WA 10321'),
    (7, 'Jenny Yang', 'yang.jing.92@example.com', '555-827-1304', '98 Maple Ave, Apt 4, Beachside, NC 39912', '1844 Park Ave, Beach City, SC 38112'),
    (8, 'Antoine King', 'a.king@example.com', '555-604-3217', '3 Redwood St, Suite 2B, Forestville, OR 40073', '9 West Elm St, Apt D, Meadowville, CA 63104'),
    (9, 'Laura Dudek', 'laura.dudek@example.com', '555-904-5278', '700 Main St, Apt C, Silver Spring, MD 51530', '700 Main St, Apt C, Silver Spring, MD 51530'),
    (10, 'A.R. Khan', 'arkhan@example.com', '555-712-8010', '30 South Oak Ave, Suite 1, Parksville, TX 85003', '30 South Oak Ave, Suite 1, Parksville, TX 85003');


    INSERT INTO shipments (shipment_id, customer_id, package_description, weight_kg, shipping_method, shipping_date, delivery_date, status)
VALUES
    (1, 3, 'Electronics', 4.2, 'Express', '2023-07-31', '2023-08-02', 'Delivered'),
    (2, 1, 'Clothing & Accessories', 3, 'Standard', '2023-09-04', '2023-09-08', 'Delivered'),
    (3, 4, 'Furniture', 18.5, 'Express', '2023-10-15', '2023-10-17', 'Delivered'),
    (4, 8, 'Books', 2, 'Standard', '2023-11-07', '2023-11-11', 'Delivered'),
    (5, 9, 'Automotive Parts', 5.7, 'Express', '2023-12-08', '2023-12-11', 'Delivered'),
    (6, 12, 'Clothing & Accessories', 3.1, 'Standard', '2023-12-13', '2023-12-17', 'Delivered'),
    (7, 1, 'Electronics', 1.4, 'Standard', '2024-01-17', '2024-01-21', 'Delivered'),
    (8, 5, 'Books', 1.7, 'Express', '2024-04-12', NULL, 'In Transit'),
    (9, 10, 'Clothing & Accessories', 0.5, 'Express', '2024-04-12', NULL, 'In Transit'),
    (10, 7, 'Electronics', 1.2, 'Standard', '2024-04-11', NULL, 'In Transit');



--Which customers have placed more than 5 shipments?

select
	c.customer_name,
    count(s.shipment_id) as shipment_count
from
	customers c 
left join shipments s
on c.customer_id = s.customer_id
group by c.customer_name
having count(s.shipment_id) >5;

--Find the percentage of shipments delivered on or before the delivery_date (compare delivery_date with shipping_date).

SELECT COUNT(*) 
FROM shipments
WHERE delivery_date <= shipping_date;


--For each shipping method, calculate the average weight of shipments and the average delivery time in days.

SELECT
    shipping_method,
    ROUND(AVG(weight_kg),2) AS avg_weight,
    ROUND(AVG(JULIANDAY(delivery_date) - JULIANDAY(shipping_date)),2) AS avg_delivery_days
FROM
    shipments
GROUP BY
    shipping_method;


--Assuming each shipment has a cost of $10 per kg, calculate the total revenue per customer.

select
	c.customer_name as Customer,
    sum(s.weight_kg * 10) as total_revenue
from
	customers c
inner join shipments s
	on c.customer_id = s.customer_id
group by
	c.customer_name;
    
--List customers who had at least 2 shipments with status = 'Delayed'.

select
	c.customer_name,
    count(s.status)
from 
	customers c
left join shipments s
on c.customer_id - s.customer_id
group by c.customer_name
having count(s.status) > 2 and s.status = 'Delayed';


SELECT
    c.customer_name,
    COUNT(CASE WHEN s.status = 'Delayed' THEN 1 END) AS delayed_shipments
FROM 
    customers c
LEFT JOIN shipments s
    ON c.customer_id = s.customer_id
GROUP BY c.customer_name
HAVING delayed_shipments >= 2;

--Show the number of shipments per month (grouped by shipping_date month)

select
	strftime('%Y-%m', shipping_date) as month,
    count(*) as total_shipments
from shipments
group by month;

--List customers whose billing_address and shipping_address are different

select 

customer_name,
billing_address,
shipping_address

from customers
where billing_address <> shipping_address;

----Find the top 3 customers by total shipment weight

select
	c.customer_name,
    sum(s.weight_kg) as total_weight
from
	customers c
inner join shipments s
	on c.customer_id = s.customer_id
 group by c.customer_name
 order by total_weight desc
 limit 3;
